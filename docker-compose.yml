version: "3.9"

services:

  mongodb:
    env_file: .env
    image: $MONGODB_IMAGE_TAG
    container_name: $MONGODB_CONTAINER
    environment:
      - MONGO_INITDB_ROOT_USERNAME=$MONGODB_USER
      - MONGO_INITDB_ROOT_PASSWORD=$MONGODB_PASSWORD
    networks:
      - todoapp-network
    ports:
      - $MONGODB_HOST_PORT:$MONGODB_CONTAINER_PORT
    #volumes:
    #  # we may not use it in production (do not expose/publish the mongodb port to the host, use only for tests)
    #  - $MONGODB_HOST_VOL:$MONGODB_CONTAINER_VOL
    restart: $MONGODB_RESTART_POLICY

  nodejs-srv:
    env_file: .env
    depends_on:
      - mongodb
    build:
      context: .
      dockerfile: Dockerfile.nodejs
    image: $NODEJS_IMAGE:$NODEJS_IMAGE_TAG
    container_name: $NODEJS_CONTAINER
    restart: $NODEJS_RESTART_POLICY
    networks:
      - todoapp-network
    ports:
      - $NODEJS_HOST_PORT:$NODEJS_CONTAINER_PORT
    # Volume share can be used if we wish. in this case Im copying the code from the host to the container in the Dockerfile
    #volumes:
    #  - $NODEJS_HOST_VOL:$NODEJS_CONTAINER_VOL
    environment:
      - DB_NAME=$MONGODB_NAME
      - DB_USER=$MONGODB_USER
      - DB_PASSWORD=$MONGODB_PASSWORD
      - DB_HOST=$MONGODB_HOSTNAME
      
networks:
  todoapp-network:
    driver: bridge

# Network:
# When you deploy an app using Docker Compose file, even when thereâ€™s no mention of specific 
# networking parameters, Docker Compose will create a new bridge network and deploy the 
# container over that network.

# Network drives: 
# Bridge: Allows containers in the same node to communicate.
# Host: Allows the containers to communicate with the node that run
# Overlay: Allows containers that are in the same node or in another node to communicate
# MACVLAN: Each network interface of the container gets a MAC address which in turn uses 
#          a physical interface of a Docker host
# None: A totally isolated container